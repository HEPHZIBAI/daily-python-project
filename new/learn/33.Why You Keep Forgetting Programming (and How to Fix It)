
I got this message today from a student:

"Hi Ardit, would you be able to give me some advice on how I can improve the skills that I have learnt throughout this course? Because I feel like I know how to use them, but when it comes to using them in later situations, I don’t fully remember how to use a certain module or function properly."

I get this question all the time.
And it makes total sense.

Daily Python Projects is a reader-supported publication. To receive new posts and support my work, consider becoming a free or paid subscriber.

You watch a tutorial, follow along, and everything clicks.
Then, two days later… nothing. You open a new file and can’t remember how to write even a basic version of what you just learned.

So what’s going on?

You’re following along… but not figuring things out for yourself
When you're watching an instructor write code, it all seems clear.
But you're not the one solving the problem—you're just following someone else who already knows the answer. You are getting information but you are not the one who is doing the thinking.

That’s not real practice.
That’s just copying with comprehension.
It feels productive, but it doesn't make things stick.

✅ Real learning starts when you try to build something on your own
Here’s what I told the student:

“The best way to retain the skills is to build projects. But you should build them yourself, not just type the code that an instructor does in the video. You should pick a project and try to do it on your own. Of course, you will do research and you can even ask ChatGPT questions when you get stuck, but it is important that you are the one who does the thinking, not the instructor, not ChatGPT.”

Not sure what project to try?
That’s exactly why I created Daily Python Projects.
A new small project, every day.
No solutions unless you want them.
Just you, the problem, and the code.

This is the kind of practice that makes you actually remember what you’re learning.

Watch less. Build more.
If you feel like you're forgetting everything you've learned, you're not broken. You're just ready for the next level:
Thinking in code, not just watching it.

The solution is simple:
Build. Struggle. Solve. Repeat.

You’ve got this.
Now go open a project and write your own code.

— Ardit

